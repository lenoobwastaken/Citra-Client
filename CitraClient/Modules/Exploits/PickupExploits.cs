using System.Collections;
using CitraClient.Config;
using CitraClient.GUI.QM;
using CitraClient.GUI.QM.Console;
using CitraClient.Modules.Base;
using CitraClient.Utils;
using UnityEngine;
using VRC;
using VRC.SDKBase;

namespace CitraClient.Modules.Exploits
{
	public class PickupExploits : ModuleBase
	{
		private static GameObject _orbitObj;

		public static IEnumerator PlungerHat(VRC.Player player)
		{
			while (RuntimeConfig.isPlungerHat)
			{
				if (player == null || PickupUtils.Plunger == null)
				{
					RuntimeConfig.isPlungerHat = false;
					break;
				}
				if (!Networking.LocalPlayer.IsOwner(PickupUtils.Plunger.gameObject))
				{
					Networking.SetOwner(Networking.LocalPlayer, PickupUtils.Plunger.gameObject);
				}
				if (PickupUtils.Plunger.transform.rotation != Quaternion.Euler(270f, 240f, 0f))
				{
					PickupUtils.Plunger.transform.rotation = Quaternion.Euler(270f, 240f, 0f);
				}
				PickupUtils.Plunger.transform.position = player.field_Private_VRCPlayerApi_0.GetBonePosition(HumanBodyBones.Head) + Vector3.up * 0.35f;
				yield return null;
			}
		}

		public static IEnumerator FreezePickups()
		{
			while (RuntimeConfig.isFrozenPickups)
			{
				if (!RuntimeConfig.isFrozenPickups || !WorldUtils.IsInWorld())
				{
					ExploitMenu.freezePickupsToggleButton.SetToggleState(newState: false);
					break;
				}
				VRC_Pickup[] getAllPickups = PickupUtils.GetAllPickups;
				foreach (VRC_Pickup pickup in getAllPickups)
				{
					if (pickup != null && pickup.IsHeld)
					{
						VRC.Player player = PlayerUtils.GetPlayerWithPlayerID(pickup.currentPlayer.playerId);
						ConsoleUtils.OnLogInfo("Player " + player.prop_APIUser_0.displayName + " tried to pick up \"" + pickup.name + "\"");
						CenterConsole.Log(CenterConsole.LogsType.EXPLOIT, "Player " + player.prop_APIUser_0.displayName + " tried to pick up \"" + pickup.name + "\"");
					}
					if (!Networking.LocalPlayer.IsOwner(pickup.gameObject))
					{
						PickupUtils.TakeOwnerShipPickup(pickup);
						pickup.Drop();
					}
					else
					{
						pickup.Drop();
					}
				}
				yield return null;
			}
		}

		public static IEnumerator BeyBladePickups()
		{
			while (RuntimeConfig.isPickupSpinning)
			{
				if (!RuntimeConfig.isPickupSpinning || !WorldUtils.IsInWorld())
				{
					RuntimeConfig.isPickupSpinning = false;
					ExploitMenu.beyBladePickupsToggleButton.SetToggleState(newState: false);
					break;
				}
				VRC_Pickup[] getAllPickups = PickupUtils.GetAllPickups;
				foreach (VRC_Pickup pickup in getAllPickups)
				{
					PickupUtils.TakeOwnerShipPickup(pickup);
					pickup.transform.Rotate(90f, 0f, 0f);
				}
				yield return null;
			}
		}

		public static IEnumerator PickupStare(VRC.Player player)
		{
			while (RuntimeConfig.isPickupStare)
			{
				if (!RuntimeConfig.isPickupStare)
				{
					yield break;
				}
				VRC_Pickup[] getAllPickups = PickupUtils.GetAllPickups;
				foreach (VRC_Pickup pickup in getAllPickups)
				{
					if (pickup != null)
					{
						pickup.transform.LookAt(player.transform.position);
					}
				}
				yield return null;
			}
			if (player == null)
			{
				RuntimeConfig.isPickupStare = false;
			}
		}

		public static void PickupOrbitTarget()
		{
			if (_orbitObj != null)
			{
				Object.Destroy(_orbitObj);
				return;
			}
			_orbitObj = new GameObject
			{
				name = "Orbit_Obj"
			};
			RuntimeConfig.isPickupOrbit = !RuntimeConfig.isPickupOrbit;
			PickupOrbit().Start();
		}

		private static IEnumerator PickupOrbit()
		{
			while (RuntimeConfig.isPickupOrbit && RuntimeConfig.isPickupOrbit && WorldUtils.IsInWorld() && !(_orbitObj == null))
			{
				_orbitObj.transform.position = PlayerUtils.SelectedPlayer().transform.position + new Vector3(0f, 0.2f, 0f);
				_orbitObj.transform.Rotate(new Vector3(0f, 360f * Time.time * 1f, 0f));
				VRC_Pickup[] getAllPickups = PickupUtils.GetAllPickups;
				foreach (VRC_Pickup pickup in getAllPickups)
				{
					PickupUtils.CheckForOwnerShipPickups(pickup);
					pickup.transform.position = _orbitObj.transform.position + _orbitObj.transform.forward * 1f;
					_orbitObj.transform.Rotate(new Vector3(0f, 360 / PickupUtils.GetAllPickups.Length, 0f));
				}
				yield return null;
			}
		}

		public static void ResetPickups()
		{
			foreach (VRC_Pickup item in Object.FindObjectsOfType<VRC_Pickup>())
			{
				Networking.SetOwner(Networking.LocalPlayer, item.gameObject);
				item.transform.position = new Vector3(0f, -9999f, 0f);
			}
		}

		private static void Pickups2Click()
		{
			if (!RuntimeConfig.isRaycastPickups)
			{
				return;
			}
			Camera main = Camera.main;
			if (!(main != null))
			{
				return;
			}
			Transform transform = main.transform;
			Ray ray = new Ray(transform.position, transform.forward);
			RaycastHit[] array = Physics.RaycastAll(ray);
			if (!Input.GetKey(KeyCode.LeftControl) || !Input.GetKeyDown(KeyCode.Mouse0))
			{
				return;
			}
			PickupUtils.TakeOwnerShipAllPickups();
			VRC_Pickup[] getAllPickups = PickupUtils.GetAllPickups;
			foreach (VRC_Pickup vRC_Pickup in getAllPickups)
			{
				if (!(vRC_Pickup == null))
				{
					RaycastHit raycastHit = array[0];
					if (array.Length != 0)
					{
						vRC_Pickup.transform.position = raycastHit.point;
					}
				}
			}
		}

		public static void PickupsToPlayer(VRC.Player player)
		{
			if (!(player == null))
			{
				VRC_Pickup[] getAllPickups = PickupUtils.GetAllPickups;
				foreach (VRC_Pickup vRC_Pickup in getAllPickups)
				{
					PickupUtils.TakeOwnerShipPickup(vRC_Pickup);
					vRC_Pickup.transform.position = player.field_Private_VRCPlayerApi_0.GetBonePosition(HumanBodyBones.Head);
				}
			}
		}

		public static IEnumerator PickupsToSpace()
		{
			while (RuntimeConfig.isPickupsToSpace)
			{
				if (!RuntimeConfig.isPickupsToSpace || !WorldUtils.IsInWorld())
				{
					ExploitMenu.pickupsToSpaceToggleButton.SetToggleState(newState: false);
					break;
				}
				VRC_Pickup[] getAllPickups = PickupUtils.GetAllPickups;
				foreach (VRC_Pickup pickup in getAllPickups)
				{
					if (!Networking.LocalPlayer.IsOwner(pickup.gameObject))
					{
						Networking.SetOwner(Networking.LocalPlayer, pickup.gameObject);
					}
					if (pickup.transform.position != new Vector3(0f, 999999f, 0f))
					{
						pickup.transform.position = new Vector3(0f, 999999f, 0f);
					}
					if (pickup == null || !WorldUtils.IsInWorld())
					{
						RuntimeConfig.isPickupsToSpace = false;
					}
				}
				yield return null;
			}
		}

		public static IEnumerator AntiPickupYoink()
		{
			while (RuntimeConfig.isAntiPickupYoink)
			{
				if (!RuntimeConfig.isAntiPickupYoink || !WorldUtils.IsInWorld())
				{
					ExploitMenu.pickupsToSpaceToggleButton.SetToggleState(newState: false);
					break;
				}
				try
				{
					VRC_Pickup[] getAllPickups = PickupUtils.GetAllPickups;
					foreach (VRC_Pickup pickup in getAllPickups)
					{
						PickupUtils.TakeOwnerShipPickup(pickup);
						if (pickup == null)
						{
							RuntimeConfig.isAntiPickupYoink = false;
						}
					}
				}
				catch
				{
				}
				yield return null;
			}
		}

		public static void PickupThrowStrength()
		{
			if (Configuration.GetConfig().throwStrength)
			{
				VRC_Pickup[] getAllPickups = PickupUtils.GetAllPickups;
				foreach (VRC_Pickup vRC_Pickup in getAllPickups)
				{
					if (vRC_Pickup != null)
					{
						vRC_Pickup.ThrowVelocityBoostScale = 5f;
					}
				}
			}
			if (Configuration.GetConfig().throwStrength)
			{
				return;
			}
			VRC_Pickup[] getAllPickups2 = PickupUtils.GetAllPickups;
			foreach (VRC_Pickup vRC_Pickup2 in getAllPickups2)
			{
				if (vRC_Pickup2 != null)
				{
					vRC_Pickup2.ThrowVelocityBoostScale = 1f;
				}
			}
		}

		public static IEnumerator PickupHeadSwarm(VRC.Player player)
		{
			while (RuntimeConfig.isPickupHeadSwarm)
			{
				if (player == null || !WorldUtils.IsInWorld())
				{
					RuntimeConfig.isPickupHeadSwarm = false;
					break;
				}
				PickupUtils.TakeOwnerShipAllPickups();
				VRC_Pickup[] getAllPickups = PickupUtils.GetAllPickups;
				foreach (VRC_Pickup pickup in getAllPickups)
				{
					pickup.transform.position = player.field_Private_VRCPlayerApi_0.GetBonePosition(HumanBodyBones.Head);
					if (pickup == null)
					{
						RuntimeConfig.isPickupHeadSwarm = false;
						yield break;
					}
					yield return null;
				}
			}
		}

		public override void OnSceneLoad(int buildIndex, string sceneName)
		{
			PickupUtils.FindPickupsOnSceneLoad();
		}

		public override void Update()
		{
			Pickups2Click();
			WorldExploits.Portal2Click();
		}
	}
}
