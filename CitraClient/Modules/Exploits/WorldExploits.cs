using System.Collections;
using CitraClient.Config;
using CitraClient.Modules.Base;
using Il2CppSystem;
using UnityEngine;
using VRC.SDKBase;

namespace CitraClient.Modules.Exploits
{
	public class WorldExploits : ModuleBase
	{
		private static Transform _head;

		private static VRC_AnimationController animController;

		private static VRCVrIkController ikController;

		public static void ChangePedestals(string pedestalAviID)
		{
			foreach (VRC_AvatarPedestal item in UnityEngine.Object.FindObjectsOfType<VRC_AvatarPedestal>())
			{
				Networking.RPC(RPC.Destination.All, item.gameObject, "SwitchAvatar", new Il2CppSystem.Object[1] { pedestalAviID });
			}
		}

		public static void DropPortalWithMessage(string message)
		{
			GameObject gameObject = VRCPlayer.field_Internal_Static_VRCPlayer_0.gameObject;
			GameObject targetObject = Networking.Instantiate(VRC_EventHandler.VrcBroadcastType.Always, "Portals/PortalInternalDynamic", gameObject.transform.position + gameObject.transform.forward * 1.5f, gameObject.transform.rotation);
			Il2CppSystem.Object[] array = new Il2CppSystem.Object[3]
			{
				"wrld_5b89c79e-c340-4510-be1b-476e9fcdedcc",
				"\r\t" + message + "\0~region(jp)",
				null
			};
			Int32 @int = default(Int32);
			@int.m_value = 0;
			array[2] = @int.BoxIl2CppObject();
			Networking.RPC(RPC.Destination.AllBufferOne, targetObject, "ConfigurePortal", array);
		}

		public static void Portal2Click()
		{
			if (RuntimeConfig.isRaycastPortal)
			{
				Camera main = Camera.main;
				if (Input.GetKey(KeyCode.LeftControl) && Input.GetKeyDown(KeyCode.Mouse1) && main != null)
				{
					Transform transform = main.transform;
					Ray ray = new Ray(transform.position, transform.forward);
					RaycastHit[] array = Physics.RaycastAll(ray);
					Quaternion rotation = Quaternion.Euler(0f, 0f, 0f);
					RaycastHit raycastHit = array[0];
					GameObject targetObject = Networking.Instantiate(VRC_EventHandler.VrcBroadcastType.Always, "Portals/PortalInternalDynamic", raycastHit.point, rotation);
					Il2CppSystem.Object[] array2 = new Il2CppSystem.Object[3] { "wrld_5b89c79e-c340-4510-be1b-476e9fcdedcc", "\r\t\0~region(jp)", null };
					Int32 @int = default(Int32);
					@int.m_value = 0;
					array2[2] = @int.BoxIl2CppObject();
					Networking.RPC(RPC.Destination.AllBufferOne, targetObject, "ConfigurePortal", array2);
				}
			}
		}

		public static void WindowsError()
		{
			GameObject gameObject = VRCPlayer.field_Internal_Static_VRCPlayer_0.gameObject;
			GameObject targetObject = Networking.Instantiate(VRC_EventHandler.VrcBroadcastType.Always, "Portals/PortalInternalDynamic", gameObject.transform.position + new Vector3(0f, -2f, 0f), new Quaternion(4f, 4f, 0f, 1f));
			Il2CppSystem.Object[] array = new Il2CppSystem.Object[3] { "\a \r", "\r Whats that sound??? Whats that sound??? Whats that sound??? Whats that sound??? Whats that sound??? Whats that sound??? Whats that sound??? Whats that sound???", null };
			Int32 @int = default(Int32);
			@int.m_value = 0;
			array[2] = @int.BoxIl2CppObject();
			Networking.RPC(RPC.Destination.AllBufferOne, targetObject, "ConfigurePortal", array);
		}

		public static IEnumerator BanPrank()
		{
			yield return new WaitForSeconds(20f);
			VRCUiManager.prop_VRCUiManager_0.prop_VRCUiPopupManager_0.Method_Public_Void_String_String_Single_0("[ERROR]\n[Moderator Ban]", "You have been banned.\n All content on account removed.\n This ban is permanent.\n Reason: Inappropriate conduct:\ncreation of sexually explicit avatars.\n Contact Support: D_N_@vrchat.com", 20f);
		}

		public static void ColliderHider(bool state)
		{
			VRCPlayer field_Internal_Static_VRCPlayer_ = VRCPlayer.field_Internal_Static_VRCPlayer_0;
			if (!(field_Internal_Static_VRCPlayer_ != null))
			{
				if (_head == null)
				{
					_head = VRCVrCamera.field_Private_Static_VRCVrCamera_0.transform.parent;
				}
				if (animController == null)
				{
					animController = field_Internal_Static_VRCPlayer_.GetComponentInChildren<VRC_AnimationController>();
				}
				if (ikController == null)
				{
					ikController = field_Internal_Static_VRCPlayer_.GetComponentInChildren<VRCVrIkController>();
				}
				field_Internal_Static_VRCPlayer_.transform.position += new Vector3(0f, state ? (-4) : 4, 0f);
				animController.field_Private_Boolean_0 = !state;
				ikController.field_Private_Boolean_0 = true;
				if (state)
				{
					_head.localPosition += new Vector3(0f, 4f / _head.parent.transform.localScale.y, 0f);
				}
				else
				{
					_head.localPosition = Vector3.zero;
				}
			}
		}
	}
}
