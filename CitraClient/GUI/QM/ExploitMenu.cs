using CitraClient.API.QM;
using CitraClient.Config;
using CitraClient.Modules.Exploits;
using CitraClient.Utils;
using Il2CppSystem.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

namespace CitraClient.GUI.QM
{
	public static class ExploitMenu
	{
		private const bool _isDebug = true;

		public static QMNestedButton exploitMenu;

		public static QMToggleButton freezePickupsToggleButton;

		public static QMToggleButton beyBladePickupsToggleButton;

		public static QMToggleButton pickupsToSpaceToggleButton;

		public static QMToggleButton colliderHiderToggleButton;

		public static QMToggleButton antiPickupYoinkToggleButton;

		public static void InitExploitMenu()
		{
			exploitMenu = new QMNestedButton(MainMenu.MainPage, "Exploits", 3f, 1f, "Menu that contains funny modules", "<color=#CE389C>Citra:</color> <color=#00d1ed>Exploits</color>");
			freezePickupsToggleButton = new QMToggleButton(exploitMenu, 1f, 0f, "Freeze Pickups", delegate
			{
				RuntimeConfig.isFrozenPickups = true;
				freezePickupsToggleButton.SetToggleState(newState: true);
				PickupExploits.FreezePickups().Start();
			}, delegate
			{
				RuntimeConfig.isFrozenPickups = false;
				freezePickupsToggleButton.SetToggleState(newState: false);
			}, "Prevent other players from picking up Pickups.");
			new QMSingleButton(exploitMenu, 2f, 0f, "Drop Pickups", delegate
			{
				PickupUtils.TakeOwnerShipAllPickups();
			}, "Drop all pickups out of peoples hands.");
			new QMSingleButton(exploitMenu, 3f, 0f, "Create Portal", delegate
			{
				VRCUiPopupManager.prop_VRCUiPopupManager_0.ShowInputPopupWithCancel("Create a Funny Portal", string.Empty, InputField.InputType.Standard, useNumericKeypad: false, "Create", delegate(string s, List<KeyCode> k, Text t)
				{
					WorldExploits.DropPortalWithMessage(s);
				}, Popups.HideCurrentPopup);
			}, "Drop a Portal with a custom message");
			new QMSingleButton(exploitMenu, 4f, 0f, "Reset Pickups", delegate
			{
				PickupExploits.ResetPickups();
			}, "Globally Reset the position of pickups to their default location.");
			new QMSingleButton(exploitMenu, 1f, 1f, "Change\nPedestals", delegate
			{
				VRCUiPopupManager.prop_VRCUiPopupManager_0.ShowInputPopupWithCancel("Please Enter Avatar ID", string.Empty, InputField.InputType.Standard, useNumericKeypad: false, "Change", delegate(string s, List<KeyCode> k, Text t)
				{
					WorldExploits.ChangePedestals(s);
				}, Popups.HideCurrentPopup);
			}, "Changes Avatar Pedestals to an avatar you choose.");
			new QMSingleButton(exploitMenu, 2f, 1f, "Windows Error Sound", delegate
			{
				WorldExploits.WindowsError();
			}, "Plays the Windows Error sound for users logging portals.");
			new QMToggleButton(exploitMenu, 3f, 1f, "Pickups 2 Click", delegate
			{
				RuntimeConfig.isRaycastPickups = true;
				Configuration.Save();
			}, delegate
			{
				RuntimeConfig.isRaycastPickups = false;
				Configuration.Save();
			}, "Hold left ctrl + left mouse click to teleport pickups.");
			new QMToggleButton(exploitMenu, 4f, 1f, "Portal 2 Click", delegate
			{
				RuntimeConfig.isRaycastPortal = true;
				Configuration.Save();
			}, delegate
			{
				RuntimeConfig.isRaycastPortal = false;
				Configuration.Save();
			}, "Hold left ctrl + right mouse click to spawn a portal.");
			new QMSingleButton(exploitMenu, 1f, 2f, "Force Lewd All", delegate
			{
				WorldExploits.BanPrank().Start();
			}, string.Empty);
			beyBladePickupsToggleButton = new QMToggleButton(exploitMenu, 2f, 2f, "BeyBlade Pickups", delegate
			{
				RuntimeConfig.isPickupSpinning = true;
				beyBladePickupsToggleButton.SetToggleState(newState: true);
				PickupExploits.BeyBladePickups().Start();
			}, delegate
			{
				RuntimeConfig.isPickupSpinning = false;
				beyBladePickupsToggleButton.SetToggleState(newState: false);
			}, "Makes Pickups spin around like BeyBlades.");
			new QMToggleButton(exploitMenu, 3f, 2f, "Pickup Strength", delegate
			{
				Configuration.GetConfig().throwStrength = true;
				PickupExploits.PickupThrowStrength();
				Configuration.Save();
			}, delegate
			{
				Configuration.GetConfig().throwStrength = false;
				PickupExploits.PickupThrowStrength();
				Configuration.Save();
			}, "Toggles the ability to throw pickups faster.");
			pickupsToSpaceToggleButton = new QMToggleButton(exploitMenu, 4f, 2f, "Pickups To Space", delegate
			{
				RuntimeConfig.isPickupsToSpace = true;
				pickupsToSpaceToggleButton.SetToggleState(newState: true);
				PickupExploits.PickupsToSpace().Start();
			}, delegate
			{
				RuntimeConfig.isPickupsToSpace = false;
				pickupsToSpaceToggleButton.SetToggleState(newState: false);
			}, "Attempts to send Pickups to the void.");
			antiPickupYoinkToggleButton = new QMToggleButton(exploitMenu, 1f, 3f, "Anti Pickup Yoink", delegate
			{
				RuntimeConfig.isAntiPickupYoink = true;
				antiPickupYoinkToggleButton.SetToggleState(newState: true);
				PickupExploits.AntiPickupYoink().Start();
			}, delegate
			{
				RuntimeConfig.isAntiPickupYoink = false;
				antiPickupYoinkToggleButton.SetToggleState(newState: false);
			}, "Attempts to have exclusive ownership over all pickups.");
		}
	}
}
